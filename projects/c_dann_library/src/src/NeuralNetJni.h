/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class syncleus_dann_NeuralNet */

#ifndef _Included_syncleus_dann_NeuralNet
#define _Included_syncleus_dann_NeuralNet
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    nativeConstructor
 * Signature: (Lsyncleus_dann/DNA;II)I
 */
JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_nativeConstructor
  (JNIEnv *, jobject, jobject, jint, jint);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    nativeDestructor
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_nativeDestructor
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    AddLayerAfterInput
 * Signature: (I)Lsyncleus_dann/Layer;
 */
JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_AddLayerAfterInput
  (JNIEnv *, jobject, jint);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    AddLayerBeforeOutput
 * Signature: (I)Lsyncleus_dann/Layer;
 */
JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_AddLayerBeforeOutput
  (JNIEnv *, jobject, jint);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    AddLayerBefore
 * Signature: (ILsyncleus_dann/Layer;)Lsyncleus_dann/Layer;
 */
JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_AddLayerBefore
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    AddLayerAfter
 * Signature: (ILsyncleus_dann/Layer;)Lsyncleus_dann/Layer;
 */
JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_AddLayerAfter
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    ConnectAllFeedForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_ConnectAllFeedForward
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    ConnectLayeredFeedForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_ConnectLayeredFeedForward
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetRandomForwardNeuron
 * Signature: (Lsyncleus_dann/Neuron;)Lsyncleus_dann/Neuron;
 */
JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_GetRandomForwardNeuron
  (JNIEnv *, jobject, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetNeuronCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetNeuronCount
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetOutgoingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetOutgoingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetIncommingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetIncommingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetMaximumOutgoingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetMaximumOutgoingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetMinimumOutgoingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetMinimumOutgoingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetMaximumIncommingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetMaximumIncommingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetMinimumIncommingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetMinimumIncommingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    GetCurrentOutput
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_syncleus_dann_NeuralNet_GetCurrentOutput
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    SetCurrentInput
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_SetCurrentInput
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    PropogateOutput
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_PropogateOutput
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    SetCurrentTraining
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_SetCurrentTraining
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    BackPropogateWeightTraining
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_BackPropogateWeightTraining
  (JNIEnv *, jobject);

/*
 * Class:     syncleus_dann_NeuralNet
 * Method:    BackPropogateStructureTraining
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_BackPropogateStructureTraining
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
