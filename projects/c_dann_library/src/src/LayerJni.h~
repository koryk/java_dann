/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class dannjni_Layer */

#ifndef _Included_dannjni_Layer
#define _Included_dannjni_Layer
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     dannjni_Layer
 * Method:    getSourceLayer
 * Signature: ()Ldannjni/Layer;
 */
JNIEXPORT jobject JNICALL Java_dannjni_Layer_getSourceLayer
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    getDestinationLayer
 * Signature: ()Ldannjni/Layer;
 */
JNIEXPORT jobject JNICALL Java_dannjni_Layer_getDestinationLayer
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    nativeConstructor
 * Signature: (Ldannjni/NeuralNet;Ldannjni/DNA;Ldannjni/Layer;Ldannjni/Layer;)I
 */
JNIEXPORT jint JNICALL Java_dannjni_Layer_nativeConstructor
  (JNIEnv *, jobject, jobject, jobject, jobject, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    nativeDestructor
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_nativeDestructor
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    GetNeuralNet
 * Signature: ()Ldannjni/NeuralNet;
 */
JNIEXPORT jobject JNICALL Java_dannjni_Layer_GetNeuralNet
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    AddNeurons
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_AddNeurons
  (JNIEnv *, jobject, jint);

/*
 * Class:     dannjni_Layer
 * Method:    AddNeuron
 * Signature: (Ldannjni/Neuron;)V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_AddNeuron
  (JNIEnv *, jobject, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    ConnectAllToLayer
 * Signature: (Ldannjni/Layer;)V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_ConnectAllToLayer
  (JNIEnv *, jobject, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    ConnectAllToNextLayer
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_ConnectAllToNextLayer
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    ConnectAllToForwardLayers
 * Signature: (Ldannjni/Layer;)V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_ConnectAllToForwardLayers
  (JNIEnv *, jobject, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    GetRandomNeuron
 * Signature: ()Ldannjni/Neuron;
 */
JNIEXPORT jobject JNICALL Java_dannjni_Layer_GetRandomNeuron
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    GetNeuronByUid
 * Signature: (I)Ldannjni/Neuron;
 */
JNIEXPORT jobject JNICALL Java_dannjni_Layer_GetNeuronByUid
  (JNIEnv *, jobject, jint);

/*
 * Class:     dannjni_Layer
 * Method:    ContainsNeuronByUid
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_dannjni_Layer_ContainsNeuronByUid
  (JNIEnv *, jobject, jint);

/*
 * Class:     dannjni_Layer
 * Method:    NeuronCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_dannjni_Layer_NeuronCount
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    OutgoingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_dannjni_Layer_OutgoingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    IncommingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_dannjni_Layer_IncommingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    MaximumOutgoingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_dannjni_Layer_MaximumOutgoingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    MinimumOutgoingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_dannjni_Layer_MinimumOutgoingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    MaximumIncommingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_dannjni_Layer_MaximumIncommingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    MinimumIncommingConnectionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_dannjni_Layer_MinimumIncommingConnectionCount
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    GetOutput
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_dannjni_Layer_GetOutput
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    PropogateAll
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_PropogateAll
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    SetInput
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_SetInput
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     dannjni_Layer
 * Method:    SetTrainData
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_SetTrainData
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     dannjni_Layer
 * Method:    BackPropogateWeightAll
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_BackPropogateWeightAll
  (JNIEnv *, jobject);

/*
 * Class:     dannjni_Layer
 * Method:    BackPropogateStructureAll
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_dannjni_Layer_BackPropogateStructureAll
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
