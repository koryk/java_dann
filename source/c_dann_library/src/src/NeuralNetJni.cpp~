#include "NeuralNetJni.h"
#include "JniHelpers.h"
#include "NeuralNet.h"
#include <jni.h>


JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_nativeConstructor(JNIEnv *Application, jobject SrcObject, jobject OwnedDnaToSet, jint InputCount, jint OutputCount)
{
	//if the class already has been constructed then just return the already established native id.
	NeuralNet *NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if( NativeThis != 0 )
		return (jint) NativeThis;
	
	//this is truely a new class, generate a global reference
	NativeThis = new NeuralNet(GetNativeDNA(Application, OwnedDnaToSet), InputCount, OutputCount);
printf("brain C++ count: %i\r\n", NativeThis->GetNeuronCount());
	return (jint) NativeThis;
}

JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_nativeDestructor(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	delete NativeThis;
}

JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_AddLayerAfterInput(JNIEnv *Application, jobject SrcObject, jint NeuronCount)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	Layer* NewLayer = NativeThis->AddLayerAfterInput(NeuronCount);

	jclass JavaLayerClass = Application->FindClass("syncleus/dann/Layer");
	jmethodID JavaLayerConstructor = Application->GetMethodID(JavaLayerClass, "<init>", "(I)V");
	return Application->NewObject(JavaLayerClass, JavaLayerConstructor, ((jint)NewLayer));
}

JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_AddLayerBeforeOutput(JNIEnv *Application, jobject SrcObject, jint NeuronCount)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	Layer* NewLayer = NativeThis->AddLayerBeforeOutput(NeuronCount);

	jclass JavaLayerClass = Application->FindClass("syncleus/dann/Layer");
	jmethodID JavaLayerConstructor = Application->GetMethodID(JavaLayerClass, "<init>", "(I)V");
	return Application->NewObject(JavaLayerClass, JavaLayerConstructor, (jint)NewLayer);
}

JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_AddLayerBefore(JNIEnv *Application, jobject SrcObject, jint NeuronCount, jobject ReferenceLayer)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	//obtain the reference layer
	Layer* NativeReferenceLayer = GetNativeLayer(Application, ReferenceLayer);

	//Make the Native call
	Layer* NewLayer = NativeThis->AddLayerBefore(NeuronCount, NativeReferenceLayer);

	//create the java layer class
	jclass JavaLayerClass = Application->FindClass("syncleus/dann/Layer");
	jmethodID JavaLayerConstructor = Application->GetMethodID(JavaLayerClass, "<init>", "(I)V");
	return Application->NewObject(JavaLayerClass, JavaLayerConstructor, (jint)NewLayer);
}

JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_AddLayerAfter(JNIEnv *Application, jobject SrcObject, jint NeuronCount, jobject ReferenceLayer)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	//obtain the reference layer
	Layer* NativeReferenceLayer = GetNativeLayer(Application, ReferenceLayer);

	//Make the Native call
	Layer* NewLayer = NativeThis->AddLayerAfter(NeuronCount, NativeReferenceLayer);

	//create the java layer class
	jclass JavaLayerClass = Application->FindClass("syncleus/dann/Layer");
	jmethodID JavaLayerConstructor = Application->GetMethodID(JavaLayerClass, "<init>", "(I)V");
	return Application->NewObject(JavaLayerClass, JavaLayerConstructor, (jint)NewLayer);
}

JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_ConnectAllFeedForward(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	NativeThis->ConnectAllFeedForward();
}

JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_ConnectLayeredFeedForward(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	NativeThis->ConnectLayeredFeedForward();
}

JNIEXPORT jobject JNICALL Java_syncleus_dann_NeuralNet_GetRandomForwardNeuron(JNIEnv *Application, jobject SrcObject, jobject StartingNeuron)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	Neuron* NativeStartintNeuron = GetNativeNeuron(Application, StartingNeuron);
	if(NativeStartintNeuron == 0)
		throw 0;

	//Make the Native call
	Neuron* NewNeuron = NativeThis->GetRandomForwardNeuron(NativeStartintNeuron);

	//create the java layer class
	jclass JavaLayerClass = Application->FindClass("syncleus/dann/Neuron");
	jmethodID JavaLayerConstructor = Application->GetMethodID(JavaLayerClass, "<init>", "(I)V");
	return Application->NewObject(JavaLayerClass, JavaLayerConstructor, (jint)NewNeuron);
}

JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetNeuronCount(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	return (jint) NativeThis->GetNeuronCount();
}

JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetOutgoingConnectionCount(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	return (jint) NativeThis->GetOutgoingConnectionCount();
}

JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetIncommingConnectionCount(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	return (jint) NativeThis->GetIncommingConnectionCount();
}

JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetMaximumOutgoingConnectionCount(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	return (jint) NativeThis->GetMaximumOutgoingConnectionCount();
}

JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetMinimumOutgoingConnectionCount(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	return (jint) NativeThis->GetMinimumOutgoingConnectionCount();
}

JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetMaximumIncommingConnectionCount(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	return (jint) NativeThis->GetMaximumIncommingConnectionCount();
}

JNIEXPORT jint JNICALL Java_syncleus_dann_NeuralNet_GetMinimumIncommingConnectionCount(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	return (jint) NativeThis->GetMinimumIncommingConnectionCount();
}


JNIEXPORT jdoubleArray JNICALL Java_syncleus_dann_NeuralNet_GetCurrentOutput(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	double* AllOutputs = NativeThis->GetCurrentOutput();
	int OutputCount = NativeThis->OutLayer->NeuronCount();

	jdoubleArray JavaOutputs = Application->NewDoubleArray(OutputCount);
	jdouble* LocalJavaOutputs = Application->GetDoubleArrayElements(JavaOutputs, 0);
	for(int OutputIndex = 0; OutputIndex < OutputCount; OutputIndex++)
	{
		LocalJavaOutputs[OutputIndex] = AllOutputs[OutputIndex];
	}
	Application->ReleaseDoubleArrayElements(JavaOutputs, LocalJavaOutputs, 0);

	return JavaOutputs;
}

JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_SetCurrentInput(JNIEnv *Application, jobject SrcObject, jdoubleArray InputToSet)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;
	
	int InputCount = Application->GetArrayLength(InputToSet);
	jdouble* LocalInputsToSet = Application->GetDoubleArrayElements(InputToSet, 0);

	NativeThis->SetCurrentInput(LocalInputsToSet);

	Application->ReleaseDoubleArrayElements(InputToSet, LocalInputsToSet, JNI_ABORT);
}

JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_PropogateOutput(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	NativeThis->PropogateOutput();
}

JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_SetCurrentTraining(JNIEnv *Application, jobject SrcObject, jdoubleArray TrainingToSet)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;
	
	int TrainingCount = Application->GetArrayLength(TrainingToSet);
	jdouble* LocalTrainingToSet = Application->GetDoubleArrayElements(TrainingToSet, 0);

	NativeThis->SetCurrentTraining(LocalTrainingToSet);

	Application->ReleaseDoubleArrayElements(TrainingToSet, LocalTrainingToSet, JNI_ABORT);
}

JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_BackPropogateWeightTraining(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	NativeThis->BackPropogateWeightTraining();
}

JNIEXPORT void JNICALL Java_syncleus_dann_NeuralNet_BackPropogateStructureTraining(JNIEnv *Application, jobject SrcObject)
{
	//obtain the native this for the src object
	NeuralNet* NativeThis = GetNativeNeuralNet(Application, SrcObject);
	if(NativeThis == 0)
		throw 0;

	NativeThis->BackPropogateStructureTraining();
}

