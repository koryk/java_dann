#pragma once

#include "DataTypes.h"

class Synapse;
class Layer;
class DNA;


class Neuron
{
	//Attributes
private:
	double Activity;
	double Output;
	double BiasWeight;
	SynapseArray SourceSynapses;
	SynapseArray DestinationSynapses;
	Layer* ParentLayer;
	DNA* OwnedDNA;
	double DeltaTrain;
	int Uid;
	double DesiredOutput;
	double CurrentInput;
	bool InputSet;
	bool DesiredOutputSet;



	//Methods
	//Constructors
public:
	Neuron(Layer* OwningLayerToSet, DNA* DNAToSet, double InitialBiasWeight = 0);
	~Neuron();

	//Access Methods
public:
	double GetOutput();
	DNA* GetDNA();
	double GetDeltaTrain();
	Layer* GetParentLayer();

	//Network Structure
public:
	bool ConnectToNeuron(Neuron* ToConnectTo, double InitialWeight = 0);
	void DisconnectAllDestinationSynapses();
	void DisconnectAllSourceSynapses();
	void DisconnectAllSynapses();
	bool DisconnectSourceSynapse(Synapse* ToDisconnectFrom);
	bool DisconnectDestinationSynapse(Synapse* ToDisconnectFrom);
	int GetOutgoingConnectionCount();
	int GetIncommingConnectionCount();
private:
	bool ConnectFromSynapse(Synapse* ToConnectFrom);
	void RemoveDestinationSynapse(Synapse* ToRemove);
	void RemoveSourceSynapse(Synapse* ToRemove);
	bool DisconnectAnyDestinationSynapse();
	bool DisconnectAnySourceSynapse();

	//Propogation
public:
	double Propogate();
	void SetNeuronInput(double InputToSet);
	void ResetNeuronInput();
private:
	double ActivationFunction(double Activity);

	//Backpropogation
public:
	void BackPropogateWeight();
	void BackPropogateStructure();
	void SetTrainingData(double TrainingData);
private:
	double ActivationFunctionDerivitive(double Activity);
	double CalculateDeltaTrain();
	void DropSourceSynapse();
	void ConnectDestinationSynapse();
};